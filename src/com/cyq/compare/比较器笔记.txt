1.String中的compareTo方法比较两个字符串的大小时，会选取两个字符串长度中最小的一个作为比较的参考长度。
    public int compareTo(String anotherString) {
            int len1 = value.length;
            int len2 = anotherString.value.length;
            int lim = Math.min(len1, len2);      // 选取字符创长度最小的作为参考长度
            char v1[] = value;
            char v2[] = anotherString.value;

            int k = 0;
            while (k < lim) {
                char c1 = v1[k];        // 字符串转换为字符数组
                char c2 = v2[k];
                if (c1 != c2) {
                    return c1 - c2;
                }
                k++;
            }
            return len1 - len2;
        }
    }

2.Collections.sort(List<T> list)方法实际调用的是：sort(List<T> list, Comparator<? super T> c)
    public static <T extends Comparable<? super T>> void sort(List<T> list) {
        list.sort(null);
    }

    default void sort(Comparator<? super E> c) {
        Object[] a = this.toArray();
        Arrays.sort(a, (Comparator) c);             // Collections中的sort方法实际调用的是Arrays中的sort方法
        ListIterator<E> i = this.listIterator();
        for (Object e : a) {
            i.next();
            i.set((E) e);
        }
    }

3.Comparator中的compare是按照返回值从小到大排序的。
4.Comparable中的compareTo是用来比较同一个类不同实例之间的同一个属性值的。
5.若A类实现了Comparable接口，并重新了compareTo方法，则：
    (1) 在使用Collections/Arrays的sort方法对该A的对象集合进行排序时，它会按照compareTo方法中定义的那样进行排序;
    (2) 在使用自动排序容器(TreeSet/TreeMap)来存放A的对象实例集合，它也会按照compareTo方法中定义的那样进行排序;







































































































































































































































































































































































































